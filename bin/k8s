#!/usr/bin/env bash

_usg() {
    cat <<HERE
$(basename "$0") [cmd]:
 show:       show current context
 set <ctx>:  set context
 pods:       show list of pods
 bash [pod]: open bash shell on <pod>, or a random starlet worker
 erl [pod]:  open erl shell on <pod>, or a random starlet worker
HERE
}

_usage() {
    _usg
    exit 0
}

_context() {
    local CLUSTER CONTEXT
    CLUSTER="$(kubectl config get-clusters | grep "${1:-}")" &&
        [ "$(wc -l <<<"$CLUSTER")" == 1 ] &&
        CONTEXT="$(kubectl config get-users | grep "$CLUSTER")" &&
        [ "$(wc -l <<<"$CONTEXT")" == 1 ] &&
        echo "$CONTEXT"
}

_show() {
    local CTX
    CTX="$(2>&1 kubectl config current-context)" &&
        [[ "$CTX" != error:* ]] &&
        grep -Eo '\-[a-z]*\.[a-z]*' <<<"$CTX" | tr -d "-"
}

_pods() {
    kubectl get pods
}

_pod() {
    local P=${1:-starlet-worker-main}
    kubectl get pods | grep "$P" | head -n1 | cut -f1 -d" "
}

_starlet() {
    kubectl exec -it "$(_pod "${1:-}")" -c starlet -- bin/starlet remote_console
}

_bash() {
    kubectl exec -it "$(_pod "${1:-}")" -c starlet -- /usr/bin/bash
}

_set() {
    local CONTEXT
    CONTEXT="$(_context "$1")"
    if [ -z "$CONTEXT" ]
    then echo "no context matching $1"
    else kubectl config use-context "$CONTEXT"
    fi
}

[ -z "$(command -v kubectl)" ] && exit 1

case "${1:-}" in
    ""|show) _show ;;
    "pods")  _pods;;
    "bash")  _bash "${2:-}";;
    "erl")   _starlet "${2:-}";;
    "set")   [ -n "${2:-}" ] && _set "$2";;
    *) _usage;;
esac
